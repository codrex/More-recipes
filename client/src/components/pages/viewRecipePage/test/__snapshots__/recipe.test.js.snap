// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`View Recipes Page component  render as expected when add a review button is clicked  1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 1,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when add a review button is clicked  2`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 1,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": false,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": undefined,
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {},
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": true,
                                      "validExceptSubmit": true,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": false,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": undefined,
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {},
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": true,
                                        "validExceptSubmit": true,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when downvote icon is clicked  1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 4,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 3,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 3,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when downvote icon is clicked  2`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 4,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 3,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 3,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when favorite icon is clicked  1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 2,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 1,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 1,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when favorite icon is clicked  2`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 2,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 1,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 1,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when upvote icon is clicked  1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 3,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 2,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 2,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  render as expected when upvote icon is clicked  2`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Recipe
    actions={
      Object {
        "getRecipe": [Function],
        "getUser": [Function],
        "redirect": [Function],
        "toggleFav": [Function],
        "vote": [Function],
      }
    }
    favRecipes={
      Array [
        Object {
          "category": "",
          "downVotes": 1,
          "recipeId": 1,
          "recipeName": "test tester",
          "upVotes": 1,
          "views": 1,
        },
      ]
    }
    loading={false}
    match={
      Object {
        "history": Object {
          "push": [Function],
        },
        "match": Object {
          "params": Object {
            "id": 2,
          },
        },
      }
    }
    recipe={
      Object {
        "Owner": Object {
          "email": "test.test@gmail.com",
          "fullname": "test test ",
          "id": 1,
          "profilePix": "UNKNOWN",
          "username": "test",
        },
        "RecipeReviews": Array [
          Object {
            "RecipeId": 1,
            "Reviewer": Object {
              "email": "test.test@gmail.com",
              "fullname": "test tester ",
              "id": 1,
              "profilePix": "UNKNOWN",
              "username": "testi",
            },
            "ReviewerId": 1,
            "id": 50,
            "review": "resioioioioi",
          },
        ],
        "category": "",
        "downVotes": 1,
        "recipeId": 1,
        "recipeName": "test tester",
        "upVotes": 1,
        "views": 1,
      }
    }
  >
    <div
      className="container-fluid no-padding"
    >
      <TopBar
        avatar={false}
        bottom={true}
        className="top-bar justify-content-between"
        fullname=""
        handleChange={[Function]}
        handleSubmit={[Function]}
        push={[Function]}
        search={false}
        title="test tester"
      >
        <div
          className="col-12 top-bar top-bar justify-content-between"
        >
          <div
            className="top-bar-top "
          >
            <h1
              className="text-capitalize no-margin"
            >
              test tester
            </h1>
          </div>
          <div
            className="top-bar-bottom"
          >
            <span
              className="text-white lead text-uppercase"
            >
              posted by 
              <em
                className="text-lowercase lead"
              >
                @test
              </em>
            </span>
          </div>
        </div>
      </TopBar>
      <div
        className="row flex-column recipe"
      >
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
        >
          <h5
            className="display-4"
          >
            Ingredients 
          </h5>
          <Ingredients>
            <List
              className=""
              style={Object {}}
            >
              <div
                className="col-12 "
                style={Object {}}
              />
            </List>
          </Ingredients>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Directions 
          </h5>
          <Directions>
            <div
              className="col-12"
            />
          </Directions>
        </div>
        <div
          className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
        >
          <h5
            className="display-4"
          >
            Reviews and comments
            <Button
              className="btn-secondary"
              dataTarget="#modal"
              dataToggle="modal"
              id="reviewBtn"
              text="post a review"
            >
              <button
                className="btn text-capitalize btn-secondary"
                data-dismiss="modal"
                data-target="#modal"
                data-toggle="modal"
                type="button"
              >
                post a review
              </button>
            </Button>
          </h5>
          <Comments
            comments={
              Array [
                Object {
                  "RecipeId": 1,
                  "Reviewer": Object {
                    "email": "test.test@gmail.com",
                    "fullname": "test tester ",
                    "id": 1,
                    "profilePix": "UNKNOWN",
                    "username": "testi",
                  },
                  "ReviewerId": 1,
                  "id": 50,
                  "review": "resioioioioi",
                },
              ]
            }
          >
            <div
              className="col-12"
            >
              <Comment
                fullname="test tester "
                index={0}
                key="0"
                review="resioioioioi"
                username="testi"
              >
                <div
                  className="media-object comment"
                >
                  <div
                    className="avatar avatar-sm"
                  >
                    TT
                  </div>
                  <div
                    className="media-body"
                  >
                    <h1>
                      test tester 
                    </h1>
                    <h6
                      className="text-dark lead"
                    >
                      @testi
                    </h6>
                    <p
                      className="media-text no-margin"
                    >
                      resioioioioi
                    </p>
                  </div>
                </div>
              </Comment>
            </div>
          </Comments>
        </div>
      </div>
      <div
        className="d-flex justify-content-around lead topbar flex-column icon-bar"
      >
        <Icon
          iconClass="fa fa-eye recipe-card-icon"
        >
          <div
            className="icon-wrapper"
          >
            <i
              className="icon fa fa-eye recipe-card-icon"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-up"
          id="upvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-up"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-thumbs-o-down"
          id="downvote"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-thumbs-o-down"
            >
              <span>
                1
              </span>
            </i>
          </div>
        </Icon>
        <Icon
          handleClick={[Function]}
          iconClass="fa fa-heart-o fav"
          id="toggleFav"
        >
          <div
            className="icon-wrapper"
            onClick={[Function]}
          >
            <i
              className="icon fa fa-heart-o fav"
            >
              <span />
            </i>
          </div>
        </Icon>
      </div>
      <Modal
        center={true}
        id="modal"
        rightBtnText="Post review"
        title="Review"
      >
        <div
          aria-hidden="true"
          aria-labelledby="modalLabel"
          className="modal fade"
          data-backdrop="false"
          id="modal"
          role="dialog"
          tabIndex="-1"
        >
          <div
            className="modal-dialog"
            role="document"
          >
            <div
              className="modal-content col-xs-12 col-sm-12 col-md-8 col-lg-5"
            >
              <div
                className="modal-header"
              >
                <h5
                  className="modal-title text-capitalize display-4"
                  id="modalLabel"
                >
                  Review
                </h5>
                <button
                  aria-label="Close"
                  className="close"
                  data-dismiss="modal"
                  type="button"
                >
                  <span
                    aria-hidden="true"
                  >
                    Ã—
                  </span>
                </button>
              </div>
              <div
                className="modal-body"
              >
                <ReduxForm
                  id={2}
                >
                  <Connect(Form(Connect(CommentForm)))
                    destroyOnUnmount={true}
                    enableReinitialize={false}
                    forceUnregisterOnUnmount={false}
                    form="reviewForm"
                    getFormState={[Function]}
                    id={2}
                    keepDirtyOnReinitialize={false}
                    persistentSubmitErrors={false}
                    pure={true}
                    shouldAsyncValidate={[Function]}
                    shouldValidate={[Function]}
                    touchOnBlur={true}
                    touchOnChange={false}
                  >
                    <Form(Connect(CommentForm))
                      anyTouched={false}
                      array={
                        Object {
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeAll": [Function],
                          "shift": [Function],
                          "splice": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                        }
                      }
                      arrayInsert={[Function]}
                      arrayMove={[Function]}
                      arrayPop={[Function]}
                      arrayPush={[Function]}
                      arrayRemove={[Function]}
                      arrayRemoveAll={[Function]}
                      arrayShift={[Function]}
                      arraySplice={[Function]}
                      arraySwap={[Function]}
                      arrayUnshift={[Function]}
                      asyncValidating={false}
                      autofill={[Function]}
                      blur={[Function]}
                      change={[Function]}
                      clearAsyncError={[Function]}
                      clearSubmit={[Function]}
                      clearSubmitErrors={[Function]}
                      destroy={[Function]}
                      destroyOnUnmount={true}
                      dirty={false}
                      dispatch={[Function]}
                      enableReinitialize={false}
                      focus={[Function]}
                      forceUnregisterOnUnmount={false}
                      form="reviewForm"
                      getFormState={[Function]}
                      id={2}
                      initialize={[Function]}
                      initialized={false}
                      invalid={true}
                      keepDirtyOnReinitialize={false}
                      persistentSubmitErrors={false}
                      pristine={true}
                      pure={true}
                      registerField={[Function]}
                      registeredFields={
                        Object {
                          "review": Object {
                            "count": 3,
                            "name": "review",
                            "type": "Field",
                          },
                        }
                      }
                      reset={[Function]}
                      setSubmitFailed={[Function]}
                      setSubmitSucceeded={[Function]}
                      shouldAsyncValidate={[Function]}
                      shouldValidate={[Function]}
                      startAsyncValidation={[Function]}
                      startSubmit={[Function]}
                      stopAsyncValidation={[Function]}
                      stopSubmit={[Function]}
                      submit={[Function]}
                      submitFailed={false}
                      submitSucceeded={false}
                      submitting={false}
                      syncErrors={
                        Object {
                          "review": Array [
                            "review can't be blank",
                          ],
                        }
                      }
                      syncWarnings={Object {}}
                      touch={[Function]}
                      touchOnBlur={true}
                      touchOnChange={false}
                      unregisterField={[Function]}
                      untouch={[Function]}
                      updateSyncErrors={[Function]}
                      updateSyncWarnings={[Function]}
                      valid={false}
                      validExceptSubmit={false}
                      values={Object {}}
                    >
                      <Connect(CommentForm)
                        anyTouched={false}
                        array={
                          Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeAll": [Function],
                            "shift": [Function],
                            "splice": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                          }
                        }
                        asyncValidate={[Function]}
                        asyncValidating={false}
                        autofill={[Function]}
                        blur={[Function]}
                        change={[Function]}
                        clearAsyncError={[Function]}
                        clearSubmit={[Function]}
                        clearSubmitErrors={[Function]}
                        destroy={[Function]}
                        dirty={false}
                        dispatch={[Function]}
                        form="reviewForm"
                        handleSubmit={[Function]}
                        id={2}
                        initialize={[Function]}
                        initialized={false}
                        invalid={true}
                        pristine={true}
                        pure={true}
                        reset={[Function]}
                        submit={[Function]}
                        submitFailed={false}
                        submitSucceeded={false}
                        submitting={false}
                        touch={[Function]}
                        untouch={[Function]}
                        valid={false}
                      >
                        <CommentForm
                          anyTouched={false}
                          array={
                            Object {
                              "insert": [Function],
                              "move": [Function],
                              "pop": [Function],
                              "push": [Function],
                              "remove": [Function],
                              "removeAll": [Function],
                              "shift": [Function],
                              "splice": [Function],
                              "swap": [Function],
                              "unshift": [Function],
                            }
                          }
                          asyncValidate={[Function]}
                          asyncValidating={false}
                          autofill={[Function]}
                          blur={[Function]}
                          change={[Function]}
                          clearAsyncError={[Function]}
                          clearSubmit={[Function]}
                          clearSubmitErrors={[Function]}
                          destroy={[Function]}
                          dirty={false}
                          dispatch={[Function]}
                          form="reviewForm"
                          handleSubmit={[Function]}
                          id={2}
                          initialize={[Function]}
                          initialized={false}
                          invalid={true}
                          postReview={[Function]}
                          pristine={true}
                          pure={true}
                          reset={[Function]}
                          resetSuccess={[Function]}
                          submit={[Function]}
                          submitFailed={false}
                          submitSucceeded={false}
                          submitting={false}
                          success={false}
                          touch={[Function]}
                          untouch={[Function]}
                          valid={false}
                        >
                          <Form
                            disabled={false}
                            lg={true}
                            onSubmit={[Function]}
                            secondary={true}
                            submitBtnText="Post review"
                          >
                            <form
                              className="col-12"
                              onSubmit={[Function]}
                            >
                              <Field
                                component={[Function]}
                                id="review"
                                name="review"
                                placeholder="Enter your review"
                                validate={[Function]}
                              >
                                <Connect(ConnectedField)
                                  _reduxForm={
                                    Object {
                                      "anyTouched": false,
                                      "array": Object {
                                        "insert": [Function],
                                        "move": [Function],
                                        "pop": [Function],
                                        "push": [Function],
                                        "remove": [Function],
                                        "removeAll": [Function],
                                        "shift": [Function],
                                        "splice": [Function],
                                        "swap": [Function],
                                        "unshift": [Function],
                                      },
                                      "arrayInsert": [Function],
                                      "arrayMove": [Function],
                                      "arrayPop": [Function],
                                      "arrayPush": [Function],
                                      "arrayRemove": [Function],
                                      "arrayRemoveAll": [Function],
                                      "arrayShift": [Function],
                                      "arraySplice": [Function],
                                      "arraySwap": [Function],
                                      "arrayUnshift": [Function],
                                      "asyncErrors": undefined,
                                      "asyncValidate": [Function],
                                      "asyncValidating": false,
                                      "autofill": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "clearAsyncError": [Function],
                                      "clearSubmit": [Function],
                                      "clearSubmitErrors": [Function],
                                      "destroy": [Function],
                                      "destroyOnUnmount": true,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "enableReinitialize": false,
                                      "error": undefined,
                                      "focus": [Function],
                                      "forceUnregisterOnUnmount": false,
                                      "form": "reviewForm",
                                      "getFormState": [Function],
                                      "getValues": [Function],
                                      "id": 2,
                                      "initialValues": undefined,
                                      "initialize": [Function],
                                      "initialized": false,
                                      "invalid": true,
                                      "keepDirtyOnReinitialize": false,
                                      "persistentSubmitErrors": false,
                                      "pristine": true,
                                      "pure": true,
                                      "register": [Function],
                                      "registerField": [Function],
                                      "registerInnerOnSubmit": [Function],
                                      "registeredFields": Object {
                                        "review": Object {
                                          "count": 2,
                                          "name": "review",
                                          "type": "Field",
                                        },
                                      },
                                      "reset": [Function],
                                      "sectionPrefix": undefined,
                                      "setSubmitFailed": [Function],
                                      "setSubmitSucceeded": [Function],
                                      "shouldAsyncValidate": [Function],
                                      "shouldValidate": [Function],
                                      "startAsyncValidation": [Function],
                                      "startSubmit": [Function],
                                      "stopAsyncValidation": [Function],
                                      "stopSubmit": [Function],
                                      "submit": [Function],
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "syncErrors": Object {
                                        "review": Array [
                                          "review can't be blank",
                                        ],
                                      },
                                      "syncWarnings": Object {},
                                      "touch": [Function],
                                      "touchOnBlur": true,
                                      "touchOnChange": false,
                                      "triggerSubmit": undefined,
                                      "unregister": [Function],
                                      "unregisterField": [Function],
                                      "untouch": [Function],
                                      "updateSyncErrors": [Function],
                                      "updateSyncWarnings": [Function],
                                      "valid": false,
                                      "validExceptSubmit": false,
                                      "values": Object {},
                                      "warning": undefined,
                                    }
                                  }
                                  component={[Function]}
                                  id="review"
                                  name="review"
                                  normalize={[Function]}
                                  placeholder="Enter your review"
                                  validate={[Function]}
                                >
                                  <ConnectedField
                                    _reduxForm={
                                      Object {
                                        "anyTouched": false,
                                        "array": Object {
                                          "insert": [Function],
                                          "move": [Function],
                                          "pop": [Function],
                                          "push": [Function],
                                          "remove": [Function],
                                          "removeAll": [Function],
                                          "shift": [Function],
                                          "splice": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                        },
                                        "arrayInsert": [Function],
                                        "arrayMove": [Function],
                                        "arrayPop": [Function],
                                        "arrayPush": [Function],
                                        "arrayRemove": [Function],
                                        "arrayRemoveAll": [Function],
                                        "arrayShift": [Function],
                                        "arraySplice": [Function],
                                        "arraySwap": [Function],
                                        "arrayUnshift": [Function],
                                        "asyncErrors": undefined,
                                        "asyncValidate": [Function],
                                        "asyncValidating": false,
                                        "autofill": [Function],
                                        "blur": [Function],
                                        "change": [Function],
                                        "clearAsyncError": [Function],
                                        "clearSubmit": [Function],
                                        "clearSubmitErrors": [Function],
                                        "destroy": [Function],
                                        "destroyOnUnmount": true,
                                        "dirty": false,
                                        "dispatch": [Function],
                                        "enableReinitialize": false,
                                        "error": undefined,
                                        "focus": [Function],
                                        "forceUnregisterOnUnmount": false,
                                        "form": "reviewForm",
                                        "getFormState": [Function],
                                        "getValues": [Function],
                                        "id": 2,
                                        "initialValues": undefined,
                                        "initialize": [Function],
                                        "initialized": false,
                                        "invalid": true,
                                        "keepDirtyOnReinitialize": false,
                                        "persistentSubmitErrors": false,
                                        "pristine": true,
                                        "pure": true,
                                        "register": [Function],
                                        "registerField": [Function],
                                        "registerInnerOnSubmit": [Function],
                                        "registeredFields": Object {
                                          "review": Object {
                                            "count": 2,
                                            "name": "review",
                                            "type": "Field",
                                          },
                                        },
                                        "reset": [Function],
                                        "sectionPrefix": undefined,
                                        "setSubmitFailed": [Function],
                                        "setSubmitSucceeded": [Function],
                                        "shouldAsyncValidate": [Function],
                                        "shouldValidate": [Function],
                                        "startAsyncValidation": [Function],
                                        "startSubmit": [Function],
                                        "stopAsyncValidation": [Function],
                                        "stopSubmit": [Function],
                                        "submit": [Function],
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "syncErrors": Object {
                                          "review": Array [
                                            "review can't be blank",
                                          ],
                                        },
                                        "syncWarnings": Object {},
                                        "touch": [Function],
                                        "touchOnBlur": true,
                                        "touchOnChange": false,
                                        "triggerSubmit": undefined,
                                        "unregister": [Function],
                                        "unregisterField": [Function],
                                        "untouch": [Function],
                                        "updateSyncErrors": [Function],
                                        "updateSyncWarnings": [Function],
                                        "valid": false,
                                        "validExceptSubmit": false,
                                        "values": Object {},
                                        "warning": undefined,
                                      }
                                    }
                                    asyncValidating={false}
                                    component={[Function]}
                                    dirty={false}
                                    dispatch={[Function]}
                                    id="review"
                                    name="review"
                                    normalize={[Function]}
                                    placeholder="Enter your review"
                                    pristine={true}
                                    syncError={
                                      Array [
                                        "review can't be blank",
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Textarea
                                      className=""
                                      fgClassName=""
                                      id="review"
                                      input={
                                        Object {
                                          "name": "review",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onDragStart": [Function],
                                          "onDrop": [Function],
                                          "onFocus": [Function],
                                          "value": "",
                                        }
                                      }
                                      meta={
                                        Object {
                                          "active": false,
                                          "asyncValidating": false,
                                          "autofilled": false,
                                          "dirty": false,
                                          "dispatch": [Function],
                                          "error": Array [
                                            "review can't be blank",
                                          ],
                                          "form": "reviewForm",
                                          "invalid": true,
                                          "pristine": true,
                                          "submitFailed": false,
                                          "submitting": false,
                                          "touched": false,
                                          "valid": false,
                                          "visited": false,
                                          "warning": undefined,
                                        }
                                      }
                                      placeholder="Enter your review"
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <textarea
                                          aria-describedby="reviewTextarea"
                                          className="form-control text-area"
                                          id="reviewTextarea"
                                          name="review"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          placeholder="Enter your review"
                                          value=""
                                        />
                                        <div
                                          className=""
                                        />
                                      </div>
                                    </Textarea>
                                  </ConnectedField>
                                </Connect(ConnectedField)>
                              </Field>
                              <button
                                className="btn text-uppercase w-100 btn-secondary btn-lg"
                                disabled={false}
                                id="submit"
                                type="submit"
                              >
                                Post review
                              </button>
                            </form>
                          </Form>
                        </CommentForm>
                      </Connect(CommentForm)>
                    </Form(Connect(CommentForm))>
                  </Connect(Form(Connect(CommentForm)))>
                </ReduxForm>
              </div>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  </Recipe>
</Provider>
`;

exports[`View Recipes Page component  should show a loader when loading is true  1`] = `
<div
  className="container-fluid no-padding"
>
  <TopBar
    avatar={false}
    bottom={true}
    className="top-bar justify-content-between"
    fullname=""
    handleChange={[Function]}
    handleSubmit={[Function]}
    push={[Function]}
    search={false}
    title="test tester"
  >
    <span
      className="text-white lead text-uppercase"
    >
      posted by 
      <em
        className="text-lowercase lead"
      >
        @test
      </em>
    </span>
  </TopBar>
  <Loader
    loading={true}
  />
  <div
    className="d-flex justify-content-around lead topbar flex-column icon-bar"
  >
    <Icon
      iconClass="fa fa-eye recipe-card-icon"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-thumbs-o-up"
      id="upvote"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-thumbs-o-down"
      id="downvote"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-heart-o fav"
      id="toggleFav"
    />
  </div>
  <Modal
    center={true}
    id="modal"
    rightBtnText="Post review"
    title="Review"
  >
    <ReduxForm
      id={2}
    />
  </Modal>
</div>
`;

exports[`View Recipes Page component  to match empty snapshot  1`] = `
<div
  className="container-fluid no-padding"
>
  <TopBar
    avatar={false}
    bottom={true}
    className="top-bar justify-content-between"
    fullname=""
    handleChange={[Function]}
    handleSubmit={[Function]}
    push={[Function]}
    search={false}
    title="test tester"
  >
    <span
      className="text-white lead text-uppercase"
    >
      posted by 
      <em
        className="text-lowercase lead"
      >
        @test
      </em>
    </span>
  </TopBar>
  <div
    className="row flex-column recipe"
  >
    <div
      className="col-xs-12 col-sm-12 col-md-10 col-lg-9 ingredients-wrapper d-flex "
    >
      <h5
        className="display-4"
      >
        Ingredients 
      </h5>
      <Ingredients />
    </div>
    <div
      className="col-xs-12 col-sm-12 col-md-10 col-lg-9 directions-wrapper d-flex"
    >
      <h5
        className="display-4"
      >
        Directions 
      </h5>
      <Directions />
    </div>
    <div
      className="col-xs-12 col-sm-12 col-md-10 col-lg-9 comments-wrapper d-flex"
    >
      <h5
        className="display-4"
      >
        Reviews and comments
        <Button
          className="btn-secondary"
          dataTarget="#modal"
          dataToggle="modal"
          id="reviewBtn"
          text="post a review"
        />
      </h5>
      <Comments
        comments={
          Array [
            Object {
              "RecipeId": 1,
              "Reviewer": Object {
                "email": "test.test@gmail.com",
                "fullname": "test tester ",
                "id": 1,
                "profilePix": "UNKNOWN",
                "username": "testi",
              },
              "ReviewerId": 1,
              "id": 50,
              "review": "resioioioioi",
            },
          ]
        }
      />
    </div>
  </div>
  <div
    className="d-flex justify-content-around lead topbar flex-column icon-bar"
  >
    <Icon
      iconClass="fa fa-eye recipe-card-icon"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-thumbs-o-up"
      id="upvote"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-thumbs-o-down"
      id="downvote"
    >
      1
    </Icon>
    <Icon
      handleClick={[Function]}
      iconClass="fa fa-heart-o fav"
      id="toggleFav"
    />
  </div>
  <Modal
    center={true}
    id="modal"
    rightBtnText="Post review"
    title="Review"
  >
    <ReduxForm
      id={2}
    />
  </Modal>
</div>
`;
